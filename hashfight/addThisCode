//Within /vtkm/cont/cuda/internal/DeviceAdapterAlgorithmCuda.h
template <typename T, typename U, class SIn, class SStencil, class SOut>
  VTKM_CONT static void CopyIf(const vtkm::cont::ArrayHandle<U, SIn>& input,
                               const vtkm::cont::ArrayHandle<T, SStencil>& stencil,
                               vtkm::cont::ArrayHandle<U, SOut>& output,
                               const vtkm::Id &output_size)
  {
    vtkm::Id size = stencil.GetNumberOfValues();
    CopyIfPortal(input.PrepareForInput(DeviceAdapterTagCuda()),
                                    stencil.PrepareForInput(DeviceAdapterTagCuda()),
                                    output.PrepareForOutput(output_size, DeviceAdapterTagCuda()),
                                    ::vtkm::NotZeroInitialized()); //yes on the stencil
  }


//Within /vtkm/cont/DeviceAdapterAlgorithm.h
template <typename T, typename U, class CIn, class CStencil, class COut>
  VTKM_CONT static void CopyIf(const vtkm::cont::ArrayHandle<T, CIn>& input,
                               const vtkm::cont::ArrayHandle<U, CStencil>& stencil,
                               vtkm::cont::ArrayHandle<T, COut>& output,
                               const vtkm::Id &output_size);

//Within /vtkm/cont/serial/internal/DeviceAdapterAlgorithmSerial.h
template <typename T, typename U, class CIn, class CStencil, class COut>
  VTKM_CONT static void CopyIf(const vtkm::cont::ArrayHandle<T, CIn>& input,
                               const vtkm::cont::ArrayHandle<U, CStencil>& stencil,
                               vtkm::cont::ArrayHandle<T, COut>& output,
                               const vtkm::Id &output_size)
  {
    ::vtkm::NotZeroInitialized unary_predicate;
    CopyIf(input, stencil, output, output_size, unary_predicate);
  }


  template <typename T, typename U, class CIn, class CStencil, class COut, class UnaryPredicate>
  VTKM_CONT static void CopyIf(const vtkm::cont::ArrayHandle<T, CIn>& input,
                               const vtkm::cont::ArrayHandle<U, CStencil>& stencil,
                               vtkm::cont::ArrayHandle<T, COut>& output,
                               const vtkm::Id &output_size,
                               UnaryPredicate predicate)
  {
    vtkm::Id inputSize = input.GetNumberOfValues();
    VTKM_ASSERT(inputSize == stencil.GetNumberOfValues());

    auto inputPortal = input.PrepareForInput(DeviceAdapterTagSerial());
    auto stencilPortal = stencil.PrepareForInput(DeviceAdapterTagSerial());
    auto outputPortal = output.PrepareForOutput(output_size, DeviceAdapterTagSerial());

    vtkm::Id readPos = 0;
    vtkm::Id writePos = 0;

    for (; readPos < inputSize; ++readPos)
    {
      if (predicate(stencilPortal.Get(readPos)))
      {
        outputPortal.Set(writePos, inputPortal.Get(readPos));
        ++writePos;
      }
    }
  }


//Within /vtkm/cont/tbb/internal/DeviceAdapterAlgorithmTBB.h
template <typename T, typename U, class CIn, class CStencil, class COut>
  VTKM_CONT static void CopyIf(const vtkm::cont::ArrayHandle<T, CIn>& input,
                               const vtkm::cont::ArrayHandle<U, CStencil>& stencil,
                               vtkm::cont::ArrayHandle<T, COut>& output,
                               const vtkm::Id &output_size)
  {
    ::vtkm::NotZeroInitialized unary_predicate;
    CopyIf(input, stencil, output, output_size, unary_predicate);
  }

  template <typename T, typename U, class CIn, class CStencil, class COut, class UnaryPredicate>
  VTKM_CONT static void CopyIf(const vtkm::cont::ArrayHandle<T, CIn>& input,
                               const vtkm::cont::ArrayHandle<U, CStencil>& stencil,
                               vtkm::cont::ArrayHandle<T, COut>& output,
                               const vtkm::Id &output_size,
                               UnaryPredicate unary_predicate)
  {
    vtkm::Id inputSize = input.GetNumberOfValues();
    tbb::CopyIfPortals(input.PrepareForInput(DeviceAdapterTagTBB()),
                         stencil.PrepareForInput(DeviceAdapterTagTBB()),
                         output.PrepareForOutput(output_size, DeviceAdapterTagTBB()),
                         unary_predicate);
  }

