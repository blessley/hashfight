
//We first check if VTKM_DEVICE_ADAPTER is defined, so that when TBB and CUDA
//includes this file we use the device adapter that they have set.
#ifndef VTKM_DEVICE_ADAPTER
#define VTKM_DEVICE_ADAPTER VTKM_DEVICE_ADAPTER_SERIAL
#endif

#include <cudpp_hash.h>
#include <cuda_util.h>
#include <cuda_profiler_api.h>
#include <mt19937ar.h>
#include <cuda_runtime_api.h>
#include "random_numbers.h"

#include <iostream>
#include <algorithm>
#include <cctype>
#include <cstdlib>
#include <fstream>
#include <iostream>
#include <sstream>
#include <iterator>
#include <unordered_map>
#include <sstream>
#include <string>
#include <vector>

#include <thrust/device_vector.h>
#include <thrust/sort.h>

#include <vtkm/cont/ArrayHandle.h>
#include <vtkm/cont/ArrayHandleCast.h>
#include <vtkm/cont/ArrayHandleConstant.h>
#include <vtkm/cont/ArrayHandleDiscard.h>
#include <vtkm/cont/ArrayHandleIndex.h>
#include <vtkm/cont/ArrayHandlePermutation.h>
#include <vtkm/cont/ArrayPortalToIterators.h>
#include <vtkm/cont/DeviceAdapterAlgorithm.h>
#include <vtkm/cont/Timer.h>
#include <vtkm/exec/ExecutionWholeArray.h>
//#include <vtkm/worklet/HashFight.h>
#include <vtkm/worklet/DispatcherMapField.h>
#include <vtkm/worklet/WorkletMapField.h>


typedef VTKM_DEFAULT_DEVICE_ADAPTER_TAG DeviceAdapter;
typedef vtkm::cont::ArrayHandle<vtkm::Id> IdHandleType;
typedef vtkm::cont::ArrayHandle<vtkm::Float32> FloatHandleType;
typedef vtkm::cont::ArrayHandle<vtkm::UInt32> UInt32HandleType;
typedef vtkm::cont::ArrayHandle<vtkm::UInt64> UInt64HandleType;
typedef vtkm::cont::ArrayHandleIndex IndexHandleType;
typedef vtkm::cont::ArrayHandle<vtkm::UInt8> UInt8HandleType;
typedef vtkm::cont::ArrayHandleConstant<vtkm::UInt8> ConstBitHandleType;
typedef vtkm::cont::ArrayHandleConstant<vtkm::Id> ConstIdHandleType;
typedef vtkm::cont::ArrayHandle<vtkm::Vec<vtkm::Id,2> > IdVecHandleType; 
typedef vtkm::cont::ArrayHandle<vtkm::Pair<vtkm::Id,vtkm::Id> > IdPairHandleType; 
typedef vtkm::cont::ArrayHandlePermutation<IdHandleType, IdHandleType>
                                             IdPermutationType;


constexpr vtkm::UInt32 emptyKey = 0xffffffffu;   //Signifies empty slots in the table.
constexpr vtkm::UInt32 keyNotFound = 0xffffffffu;   //Signifies that a query key was not found.

//Value indicating that a hash table slot has no valid item within it.
constexpr vtkm::UInt64 emptyEntry = vtkm::UInt64(emptyKey) << 32;

//Value returned when a query fails.
constexpr vtkm::UInt64 entryNotFound = (vtkm::UInt64(emptyKey) << 32) + keyNotFound;


#define __HASHING_BENCHMARK

// Macros for timing
//----------------------------------------------------------------------------
#if defined(__HASHING_BENCHMARK) && !defined(START_TIMER_BLOCK)
// start timer
# define START_TIMER_BLOCK(name) \
    vtkm::cont::Timer<DeviceAdapter> timer_##name;

// stop timer
# define END_TIMER_BLOCK(name) \
    std::cout << #name " : elapsed : " << timer_##name.GetElapsedTime() << "\n";
#endif
#if !defined(START_TIMER_BLOCK)
# define START_TIMER_BLOCK(name)
# define END_TIMER_BLOCK(name)
#endif


//#define DEBUG_PRINT

namespace debug 
{
#ifdef DEBUG_PRINT
//----------------------------------------------------------------------------
template<typename T, 
         typename S = VTKM_DEFAULT_STORAGE_TAG>
void 
HashingDebug(const vtkm::cont::ArrayHandle<T,S> &outputArray, 
		 const char* name)
{
  typedef T ValueType;
  typedef vtkm::cont::internal::Storage<T,S> StorageType;
  typedef typename StorageType::PortalConstType PortalConstType;
  PortalConstType readPortal = outputArray.GetPortalConstControl();
  vtkm::Id numElements = readPortal.GetNumberOfValues();
  std::cout << name << "= " << numElements << " [";
  for (vtkm::Id i = 0; i < numElements; i++)
    std::cout << (vtkm::UInt64)readPortal.Get(i) << " ";
  std::cout << "]\n";
}
#else
template<typename T, typename S>
void 
HashingDebug(
    const vtkm::cont::ArrayHandle<T,S> &vtkmNotUsed(outputArray),
    const char* vtkmNotUsed(name))
{}
#endif
} // namespace debug


template <typename T>
void dump_binary(const T * data,
                 const size_t length,
                 const std::string& filename)
{
    std::ofstream ofile(filename, std::ios::binary);
    ofile.write((char*) data, sizeof(T)*length);
    ofile.close();
}

template <typename T>
void load_binary(const T * data,
                 const size_t length,
                 const std::string& filename)
{
    std::ifstream ifile(filename, std::ios::binary);
    ifile.read((char*) data, sizeof(T)*length);
    ifile.close();
}


namespace hashfight
{
  
  template<typename DeviceAdapter,
           typename TableType>
  struct HashTable
  { 
    using Algorithm = vtkm::cont::DeviceAdapterAlgorithm<DeviceAdapter>;
 
    static constexpr vtkm::FloatDefault subTableSizeFactor = 1.575;
    static constexpr vtkm::Id maxNumSubTables = 25;

    TableType entries;
    std::vector<vtkm::UInt32> sub_table_starts;
    vtkm::FloatDefault size_factor; 
    vtkm::Id size;
    vtkm::UInt32 num_keys;

    HashTable(const vtkm::UInt32 &k,
              const vtkm::FloatDefault &f) 
    : size_factor(f), num_keys(k)
    {
      size = (vtkm::Id)(subTableSizeFactor * size_factor * num_keys);

      //Initialize the subtable start indices to 0
      //sub_table_starts.assign(maxNumSubTables, (vtkm::Id)0);

      //Allocate the multi-level hash table
      Algorithm::Copy(vtkm::cont::make_ArrayHandleConstant(emptyEntry, size), entries);
    } 

  }; //struct HashTable

 
  /* Hashes an array of keys into indices within the hash table.
   * The FNV1-a hash function is used to map an unsigned integer key
   * to another unsigned integer hash value, which is projected down
   * to the range of the hash table indices. The 32 bit key is then
   * prepended to its 32-bit value for a 64-bit combined entry, and then
   * written into the hash table at the hashed index. Since this is a
   * data-parallel operation, multiple threads may simulateously write
   * their entries to the same table index, leading to a collision. Since
   * no atomics are used, the last thread to write it's entry into the index
   * is the winner of the "hash fight", a non-deterministic scatter process. 
   */
  class ComputeHash : public vtkm::worklet::WorkletMapField
  {
  private:
    vtkm::UInt32 SubTableSize;
    vtkm::UInt32 SubTableStart;

    vtkm::UInt32 ChunkStart;
    vtkm::UInt32 ChunkEnd;

  public:
    typedef void ControlSignature(FieldIn<>, FieldIn<>, WholeArrayIn<>, WholeArrayInOut<>);
    typedef void ExecutionSignature(WorkIndex, _1, _2, _3, _4);

    static constexpr vtkm::UInt32 FNV1A_OFFSET = 2166136261;
    static constexpr vtkm::UInt32 FNV1A_PRIME = 16777619;

    VTKM_CONT
    ComputeHash(const unsigned int &size, 
                const unsigned int &start,
                const unsigned int &c_start,
                const unsigned int &c_end) 
      : SubTableSize(size), SubTableStart(start)
      {
        ChunkStart = c_start + SubTableStart;
        ChunkEnd = c_end + SubTableStart;
      }

    template<typename ActiveType,
	     typename TableType>
    VTKM_EXEC
    void operator()(const vtkm::Id &index,
                    const vtkm::UInt32 &key,
		    const vtkm::UInt32 &value,
	            ActiveType &isActive,
                    TableType &hashTable) const
    {
      if (isActive.Get(index))
      {
        vtkm::UInt32 h = (FNV1A_OFFSET ^ key) * FNV1A_PRIME;
        h = (h % SubTableSize) + SubTableStart;
        if (h >= ChunkStart && h < ChunkEnd)
          hashTable.Set(h, ((vtkm::UInt64)(key) << 32) + value);
      }
    }
  };

   
  //Worklet that detects whether a face is internal.  If the
  //face is internal, then a value should not be assigned to the
  //face in the output array handle of face vertices; only external
  //faces should have a vector not equal to <-1,-1,-1>
  class CheckForMatches : public vtkm::worklet::WorkletMapField
  {
  private:
    vtkm::UInt32 SubTableSize;
    vtkm::UInt32 SubTableStart;
 
  public:
    typedef void ControlSignature(FieldIn<>, WholeArrayIn<>, WholeArrayInOut<>);
    typedef void ExecutionSignature(WorkIndex, _1, _2, _3);
 
    static constexpr vtkm::UInt32 FNV1A_OFFSET = 2166136261;
    static constexpr vtkm::UInt32 FNV1A_PRIME = 16777619;

    VTKM_CONT
    CheckForMatches(const unsigned int &size,
	            const unsigned int &start): SubTableSize(size), SubTableStart(start) { }

    template<typename ActiveType,
             typename TableType>
    VTKM_EXEC
    void operator()(const vtkm::Id &index,
                    const vtkm::UInt32 &key,
		    TableType &hashTable,
                    ActiveType &isActive) const
    {
      if (isActive.Get(index))
      {    
        vtkm::UInt32 h = (FNV1A_OFFSET ^ key) * FNV1A_PRIME;
        h = (h % SubTableSize) + SubTableStart;
        vtkm::UInt64 winningEntry = hashTable.Get(h);
        vtkm::UInt32 winningKey = (vtkm::UInt32)(winningEntry >> 32);
        isActive.Set(index, (vtkm::UInt8)vtkm::Min(vtkm::UInt32(1), (winningKey ^ key)));
      }
    }
  };


  class ProbeForKey : public vtkm::worklet::WorkletMapField
  {
  private:
    vtkm::UInt32 SubTableSize;
    vtkm::UInt32 SubTableStart;
 
  public:
    typedef void ControlSignature(FieldIn<>, FieldInOut<>, WholeArrayIn<>, WholeArrayInOut<>);
    typedef void ExecutionSignature(WorkIndex, _1, _2, _3, _4);
 
    static constexpr vtkm::UInt32 FNV1A_OFFSET = 2166136261;
    static constexpr vtkm::UInt32 FNV1A_PRIME = 16777619;

    VTKM_CONT
    ProbeForKey(const unsigned int &size,
	            const unsigned int &start): SubTableSize(size), SubTableStart(start) { }

    template<typename ActiveType,
             typename TableType>
    VTKM_EXEC
    void operator()(const vtkm::Id &index,
                    const vtkm::UInt32 &key,
	            vtkm::UInt32 &val,
  	            TableType &hashTable,
                    ActiveType &isActive) const
    {
      if (isActive.Get(index))
      {    
        vtkm::UInt32 h = (FNV1A_OFFSET ^ key) * FNV1A_PRIME;
        h = (h % SubTableSize) + SubTableStart;
        vtkm::UInt64 winningEntry = hashTable.Get(h);
        vtkm::UInt32 winningKey = (vtkm::UInt32)(winningEntry >> 32);
        vtkm::UInt8 isFound = (vtkm::UInt8)vtkm::Min(vtkm::UInt32(1), (winningKey ^ key));
        isActive.Set(index, isFound);   
        //val = isFound*val + (1-isFound)*(vtkm::UInt32)winningEntry;    
        if (!isFound) 
          val = (vtkm::UInt32)winningEntry;
          //val = (vtkm::UInt32)(winningEntry & 0xffffffff); //least 32 signif bits: value
      }
    }
  };

  /* Inserts a batch of key-value pairs into a hash table;
   * i.e., constructs a hash table to store the key-value
   * pairs for future queries/lookups.
   *
  */
  template<typename DeviceAdapter>
  void 
  Insert(const UInt32HandleType &keys,
         const UInt32HandleType &vals,
         struct HashTable<DeviceAdapter,UInt64HandleType> &hash_table)
  {
    
    using Algorithm = vtkm::cont::DeviceAdapterAlgorithm<DeviceAdapter>;

    vtkm::UInt32 numActiveEntries = hash_table.num_keys;
    
    //The active keys that still haven't been placed in the table
    UInt8HandleType isActive;
    ConstBitHandleType allActive(vtkm::UInt8(1), numActiveEntries);
    Algorithm::Copy(allActive, isActive);

    vtkm::UInt32 subTableStart = 0;
    vtkm::UInt32 subTableSize = (vtkm::UInt32)(hash_table.size_factor * numActiveEntries);   
    vtkm::Id numLoops = 0;

    //Debug: for hash table usage statistics
    #if 1    
    vtkm::UInt64 totalSpaceUsed = subTableSize;
    #endif

    //Begin hash fighting to insert keys
    while (numActiveEntries > 0)
    {
 
      std::cerr << "=============Loop " << numLoops << " =======================\n";
      std::cerr << "numActiveEntries = " << numActiveEntries << "\n";
      std::cerr << "subtableSize = " << subTableSize << "\n";
      std::cerr << "subtableStart = " << subTableStart << "\n";
 
      std::cout << "Starting ComputeHash\n";

      
      hash_table.sub_table_starts.push_back(subTableSize); 

      vtkm::Id numPasses = 4;
      const vtkm::UInt32 chunkSize = (vtkm::UInt32)vtkm::Ceil(subTableSize / (vtkm::Float32)numPasses);
      std::cout << "chunkSize = " << chunkSize << "\n"; 
      vtkm::UInt32 chunkStart = 0, chunkEnd = 0;
      const vtkm::UInt32 minSize = 40000000;
      if (subTableSize <= minSize)
      {
        numPasses = 1;
        //if (subTableSize <= 1000000)
          //break;
      }
      for (vtkm::Id pass = 0; pass < numPasses; pass++)
      {
        chunkStart = (vtkm::UInt32)(pass*chunkSize);
        chunkEnd = (vtkm::UInt32)vtkm::Min((vtkm::Id)subTableSize, (pass+1)*chunkSize);
        if (subTableSize <= minSize)
        {
          chunkStart = 0;
          chunkEnd = subTableSize;
        }
        std::cout << "start = " << chunkStart << "\n";
        std::cout << "end = " << chunkEnd << "\n";
      //Hash each key to an index in the hash table, with collisions likely occuring.
      //The last key to write to an index is the winner of the "hash fight".
      //No atomics are used to handle colliding writes - winner takes all approach.
      ComputeHash hashWorklet(subTableSize, subTableStart, chunkStart, chunkEnd);
      vtkm::worklet::DispatcherMapField<ComputeHash,DeviceAdapter> hashDispatcher(hashWorklet);
      hashDispatcher.Invoke(keys, vals, isActive, hash_table.entries);
      }
      debug::HashingDebug(keys, "keys");
      debug::HashingDebug(vals, "vals");
      debug::HashingDebug(isActive, "isActive");
      debug::HashingDebug(hash_table.entries, "hashTable");      
 
      std::cout << "Starting CheckForMatches\n";
      
      //Check for the winners of the hash fight.
      //Successfully-hashed keys are marked as inactive and removed from future fights.
      CheckForMatches matchesWorklet(subTableSize, subTableStart);
      vtkm::worklet::DispatcherMapField<CheckForMatches, DeviceAdapter> matchDispatcher(matchesWorklet);
      matchDispatcher.Invoke(keys,
			     hash_table.entries,
                             isActive);

      debug::HashingDebug(isActive, "isActive");

      //Debug: for hash table collision statistics
      vtkm::UInt32 numLosers = Algorithm::Reduce(vtkm::cont::make_ArrayHandleCast<vtkm::UInt32>(isActive), 
						 (vtkm::UInt32)0);
      vtkm::UInt32 numWinners = (vtkm::UInt32) numActiveEntries - numLosers;
      std::cout << "numLosers = " << numLosers << "\n";
      std::cout << "numWinners = " << numWinners << "\n";
      std::cout << "percent placed in table = " << numWinners / (1.0f*numActiveEntries) << "\n";
 
      numActiveEntries = numLosers;  
      subTableStart += subTableSize; 
      subTableSize = (vtkm::UInt32)(hash_table.size_factor * numActiveEntries);
      totalSpaceUsed += subTableSize;
      numLoops++;

      std::cerr << "==================================================\n";

    }  //End of while loop
    
    std::cout << "Total space used: " << totalSpaceUsed << "\n";
    std::cout << "Total allocated space: " << hash_table.size << "\n";

  } //hashfight::Insert


  
  template<typename DeviceAdapter>
  void 
  Query(const UInt32HandleType &query_keys,
        const struct HashTable<DeviceAdapter,UInt64HandleType> &ht,
        UInt32HandleType &query_values)
  {
 
    using Algorithm = vtkm::cont::DeviceAdapterAlgorithm<DeviceAdapter>;

    //vtkm::Id numActiveEntries = query_keys.GetNumberOfValues();
    vtkm::Id numSubTables = (vtkm::Id)ht.sub_table_starts.size();

    debug::HashingDebug(ht.entries, "hashTable");
    std::cout << "numSubTables = " << numSubTables << "\n";
 
    UInt8HandleType isActive;
    ConstBitHandleType allActive(vtkm::UInt8(1), query_keys.GetNumberOfValues());
    Algorithm::Copy(allActive, isActive);

    vtkm::UInt32 subTableStart = 0;
    vtkm::UInt32 subTableSize = ht.sub_table_starts[0];   
    vtkm::UInt64 totalSpaceUsed = subTableSize;
    vtkm::Id numLoops = 0;

    //Begin querying
    while (numLoops < numSubTables)
    {     
      std::cout << "=============Loop " << numLoops << " =======================\n";
      //std::cout << "numActiveEntries = " << numActiveEntries << "\n";
      std::cout << "subTableStart = " << subTableStart << "\n";
      std::cout << "subTableSize = " << subTableSize << "\n";


      std::cout << "Starting ProbeForKey\n";
      ProbeForKey queryWorklet(subTableSize, subTableStart);
      vtkm::worklet::DispatcherMapField<ProbeForKey, DeviceAdapter> queryDispatcher(queryWorklet);
      queryDispatcher.Invoke(query_keys,
			     query_values,
			     ht.entries,
                             isActive);

      debug::HashingDebug(isActive, "isActive");
      debug::HashingDebug(query_keys, "query_keys");
      debug::HashingDebug(query_values, "query_values");

      /*
      vtkm::UInt32 numLosers = Algorithm::Reduce(vtkm::cont::make_ArrayHandleCast<vtkm::UInt32>(isActive), 
						 (vtkm::UInt32)0);
      vtkm::UInt32 numWinners = (vtkm::UInt32) numActiveEntries - numLosers;
      std::cout << "numLosers = " << numLosers << "\n";
      std::cout << "numWinners = " << numWinners << "\n";
      std::cout << "percent found in table = " << numWinners / (1.0f*numActiveEntries) << "\n";
 
      numActiveEntries = numLosers;  
      */      

      subTableStart += subTableSize;
      numLoops++;
      subTableSize = ht.sub_table_starts[numLoops];
      totalSpaceUsed += subTableSize;

      std::cout << "==================================================\n";
    }

    std::cout << "Total space used: " << totalSpaceUsed << "\n";
    std::cout << "Total allocated space: " << ht.size << "\n";

  }

} //namespace hashfight


int CheckResults_basic(const unsigned kInputSize,
                       const std::unordered_map<unsigned, unsigned> &pairs,
                       const unsigned *query_keys,
                       const unsigned *query_vals)
{
  int errors = 0;
  for (unsigned i = 0; i < kInputSize; ++i)
  {
    unsigned actual_value = keyNotFound;
    std::unordered_map<unsigned, unsigned>::const_iterator it =
            pairs.find(query_keys[i]);
    if (it != pairs.end())
      actual_value = it->second;
    if (actual_value != query_vals[i])
    {
      errors++;
      printf("\t\t\tError for key %10u: Actual value is "
                   "%10u, but hash returned %10u.\n",
                   query_keys[i], actual_value, query_vals[i]);
    }
  }
  return errors;
}


int main(int argc, char** argv)
{
  if (argc < 2)
    return -1;

  std::cout << "========================CUDPP Cuckoo Hashing"
            << "==============================\n";

  int deviceCount;
  cudaGetDeviceCount(&deviceCount);
  if (deviceCount == 0)
  {
    fprintf(stderr, "Error (main): no devices supporting CUDA.\n");
    exit(1);
  }
 
  cudaDeviceProp prop;
  if (cudaGetDeviceProperties(&prop, 0) == 0)
  {
    printf("Using device %d:\n", 0);
    printf("%s; global mem: %uB; compute v%d.%d; clock: %d kHz; warps: %d; regs per block: %d; shared memory: %uB\n",
           prop.name, (unsigned int)prop.totalGlobalMem, (int)prop.major,
           (int)prop.minor, (int)prop.clockRate, (int)prop.warpSize, (int)prop.regsPerBlock, (unsigned int)prop.sharedMemPerBlock);
  }

  if (prop.major < 2)
  {
    fprintf(stderr, "ERROR: CUDPP hash tables are only supported on "
                "devices with compute\n  capability 2.0 or greater; "
                "exiting.\n");
    exit(1);
  }


  CUDPPHandle theCudpp;
  CUDPPResult result = cudppCreate(&theCudpp);
  if (result != CUDPP_SUCCESS)
  {
    fprintf(stderr, "Error initializing CUDPP Library.\n");
    exit(1);
  }

  //const unsigned kNumSpaceUsagesToTest = 5;
  const float kSpaceUsagesToTest[] = {1.05f, 1.15f, 1.25f, 1.5f, 2.0f};

  //unsigned int kInputSize = 100000000;
  
  unsigned int kInputSize = (unsigned int)std::atoi(argv[1]);

  CUDPPHashTableType htt = CUDPP_BASIC_HASH_TABLE;

  CUDPPHashTableConfig config;
  config.type = htt;
  config.kInputSize = kInputSize;
  //config.space_usage = kSpaceUsagesToTest[4];
  config.space_usage = (float)std::atof(argv[2]);  

  unsigned int* input_keys = new unsigned int[kInputSize];
  unsigned int* input_vals = new unsigned int[kInputSize];
  unsigned *query_keys = new unsigned[kInputSize];
  unsigned *query_vals = new unsigned[kInputSize];


  const unsigned int pool_size = kInputSize * 2;
  unsigned int* number_pool = new unsigned int[pool_size];
  GenerateUniqueRandomNumbers(number_pool, pool_size);

  //The unique numbers are pre-shuffled by the generator.
  //Take the first half as the input keys.
  memcpy(input_keys, number_pool, sizeof(unsigned int) * kInputSize);

  for (unsigned int i = 0; i < kInputSize; i++)
    input_vals[i] = (unsigned int) genrand_int32();

  //Save the original input for checking the results.
  std::unordered_map<unsigned, unsigned> pairs_basic;
  for (unsigned i = 0; i < kInputSize; ++i)
    pairs_basic[input_keys[i]] = input_vals[i];

  dump_binary(input_keys, kInputSize, "inputKeys-" + std::to_string(kInputSize));
  dump_binary(input_vals, kInputSize, "inputVals-" + std::to_string(kInputSize));
  
  unsigned int* d_test_keys = NULL, *d_test_vals = NULL;

#if 1
  //Begin insertion phase for cuckoo hashing
START_TIMER_BLOCK(CuckooHashingBuild)
  CUDA_SAFE_CALL(cudaMalloc((void**) &d_test_keys,
                            sizeof(unsigned int) * kInputSize));
  CUDA_SAFE_CALL(cudaMalloc((void**) &d_test_vals,
                            sizeof(unsigned int) * kInputSize));
 

  CUDA_SAFE_CALL(cudaMemcpy(d_test_keys, input_keys,
                            sizeof(unsigned int) * kInputSize,
                            cudaMemcpyHostToDevice));

  CUDA_SAFE_CALL(cudaMemcpy(d_test_vals, input_vals,
                            sizeof(unsigned int) * kInputSize,
                            cudaMemcpyHostToDevice));

  CUDPPHandle hash_table_handle;
  result = cudppHashTable(theCudpp, &hash_table_handle, &config);
  if (result != CUDPP_SUCCESS)
  {
    fprintf(stderr, "Error in cudppHashTable call in"
                    "testHashTable (make sure your device is at"
                    "least compute version 2.0\n");
  }

  result = cudppHashInsert(hash_table_handle, d_test_keys, d_test_vals, kInputSize);
  cudaThreadSynchronize();
 
END_TIMER_BLOCK(CuckooHashingBuild)
 
  printf("Cuckoo Hash table build complete\n");
  if (result != CUDPP_SUCCESS)
  {
    fprintf(stderr, "Error in cudppHashInsert call in"
                    "testHashTable\n");
  }
  #endif


  #if 1 
  //Begin querying phase for cuckoo hashing
  const int failure_trials = 1;
  for (int failure = 0; failure < failure_trials; ++failure)
  {
    // Generate a set of queries comprised of keys both
    // from and not from the input.
    float failure_rate = failure / (float) failure_trials;
    GenerateQueries(kInputSize, failure_rate, number_pool, query_keys);
    printf("Querying with %.3f chance of "
           "failed queries\n", failure_rate);
    
    dump_binary(query_keys, kInputSize, "queryKeys-" + std::to_string(kInputSize));

START_TIMER_BLOCK(CuckooHashingRetrieve)
   CUDA_SAFE_CALL(cudaMemcpy(d_test_keys, query_keys,
                              sizeof(unsigned int) * kInputSize,
                              cudaMemcpyHostToDevice));
    CUDA_SAFE_CALL(cudaMemset(d_test_vals, 0,
                              sizeof(unsigned int) * kInputSize));

    unsigned int errors = 0;
    result = cudppHashRetrieve(hash_table_handle,
                               d_test_keys, d_test_vals,
                               kInputSize); 
    cudaThreadSynchronize();
END_TIMER_BLOCK(CuckooHashingRetrieve)

    if (result != CUDPP_SUCCESS)
      fprintf(stderr, "Error in cudppHashRetrieve call in"
                                "testHashTable\n");

    //Check the results.
    CUDA_SAFE_CALL(cudaMemcpy(query_vals, d_test_vals,
                              sizeof(unsigned) * kInputSize,
                              cudaMemcpyDeviceToHost));
    errors += CheckResults_basic(kInputSize,
                                 pairs_basic,
                                 query_keys,
                                 query_vals);
    if (errors > 0)
      printf("%d errors found\n", errors);
    else
      printf("No errors found, test passes\n");
  }
  #endif
    

  //Free the hash table and data arrays from the device
  result = cudppDestroyHashTable(theCudpp, hash_table_handle);
  if (result != CUDPP_SUCCESS)
  {
    fprintf(stderr, "Error in cudppDestroyHashTable call in"
                            "testHashTable\n");
  }
  CUDA_SAFE_CALL(cudaFree(d_test_keys));
  CUDA_SAFE_CALL(cudaFree(d_test_vals));
  result = cudppDestroy(theCudpp);
  if (result != CUDPP_SUCCESS)
    printf("Error shutting down CUDPP Library.\n");


#if 0 
  delete [] input_keys;
  delete [] input_vals;
  input_keys = new unsigned int[20]; 
  input_vals = new unsigned int[20];
  kInputSize = 20;

  int i;
  unsigned int r;
  for (i = 0; i < kInputSize; i++)
  {
    r = genrand_int32();
    *(input_keys+i) = r;    
    *(input_vals+i) = r;
  }
#endif


  std::cout << "========================VTK-m HashFight Hashing"
            << "==============================\n";

  using Algorithm = vtkm::cont::DeviceAdapterAlgorithm<DeviceAdapter>;
  using DeviceAdapterTraits = vtkm::cont::DeviceAdapterTraits<DeviceAdapter>;
  std::cout << "Running on device adapter: " << DeviceAdapterTraits::GetName() << "\n";

  vtkm::cont::ArrayHandle<vtkm::UInt32> insertKeys =
    vtkm::cont::make_ArrayHandle(input_keys, kInputSize);
 
  vtkm::cont::ArrayHandle<vtkm::UInt32> insertVals =
    vtkm::cont::make_ArrayHandle(input_vals, kInputSize);


  debug::HashingDebug(insertKeys, "insertKeys");
  debug::HashingDebug(insertVals, "insertVals"); 

  /*
  vtkm::cont::ArrayHandleCast<vtkm::Id, vtkm::cont::ArrayHandle<unsigned int> > castArrayKeys(insertKeys);
  IdHandleType castedKeys;
  Algorithm::Copy(castArrayKeys, castedKeys);
 
  vtkm::cont::ArrayHandleCast<vtkm::Id, vtkm::cont::ArrayHandle<unsigned int> > castArrayVals(insertVals);
  IdHandleType castedVals;
  Algorithm::Copy(castArrayVals, castedVals);
 
  debug::HashingDebug(castedKeys, "castedKeys");
  debug::HashingDebug(castedVals, "castedVals");
  */


  //Configure and initialize the hash table
  hashfight::HashTable<DeviceAdapter,UInt64HandleType> ht((vtkm::Id)kInputSize,
                                                        (vtkm::FloatDefault)std::atof(argv[2]));

  std::cout << "Table size = " << ht.size << "\n";

#if 1

  vtkm::UInt32 tableBytes = ht.size * sizeof(vtkm::UInt32);
  std::cout << "L2 Cache Size = " << prop.l2CacheSize << "\n"
            << "Global L1 Cache Supported = " << prop.globalL1CacheSupported << "\n"
            << "Local L1 Cache Supported = " << prop.localL1CacheSupported << "\n";  

  std::cout << "Number of passes = 32\n";
  std::cout << "Chunk size = " << tableBytes / 32 << "\n";

  std::cout << "Building hash table...\n";
START_TIMER_BLOCK(HashFightBuild)

  //Insert the keys into the hash table
  hashfight::Insert<DeviceAdapter>(insertKeys,
                                   insertVals,
                                   ht);

  debug::HashingDebug(ht.entries, "hashTable");
 
END_TIMER_BLOCK(HashFightBuild)

insertKeys.ReleaseResourcesExecution();
insertVals.ReleaseResourcesExecution();
#endif

#if 0

  vtkm::cont::ArrayHandle<vtkm::UInt32> queryKeys =
    vtkm::cont::make_ArrayHandle(query_keys, kInputSize);

  vtkm::cont::ArrayHandle<vtkm::UInt32> queryVals;
  Algorithm::Copy(vtkm::cont::make_ArrayHandleConstant(keyNotFound, kInputSize), queryVals);

  debug::HashingDebug(queryKeys, "queryKeys");
  debug::HashingDebug(queryVals, "queryVals");

  std::cout << "Querying the hash table...\n";
START_TIMER_BLOCK(HashFightQuery)

  //Query the hash table
  hashfight::Query<DeviceAdapter>(queryKeys,
                                  ht,
                                  queryVals);

  debug::HashingDebug(queryKeys, "queryKeys");
  debug::HashingDebug(queryVals, "queryVals");
 
END_TIMER_BLOCK(HashFightQuery)

  int errors = CheckResults_basic(kInputSize,
                                  pairs_basic,
                                  query_keys,
                                  vtkm::cont::ArrayPortalToIteratorBegin(queryVals.GetPortalConstControl()));
  if (errors > 0)
    printf("%d errors found\n", errors);
  else
    printf("No errors found, test passes\n");

#endif
 

  //cudaProfilerStop();
  
  delete [] number_pool;
  delete [] input_keys;
  delete [] input_vals;
  delete [] query_keys; 
  delete [] query_vals;

}

#if (defined(VTKM_GCC) || defined(VTKM_CLANG))
# pragma GCC diagnostic pop
#endif
